# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: iOS Swift Code Review with Claude

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.swift'
      - '**/*.h'
      - '**/*.m'

jobs:
  code-review:
    if: false 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.swift
          **/*.h
          **/*.m
        separator: ","
    
    - name: Code Review with Claude
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Changed files
          const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',');
          
          // 코드를 청크로 나누는 함수
          function chunkCode(code, maxChunkSize = 8000) {
            const lines = code.split('\n');
            const chunks = [];
            let currentChunk = '';
            
            for (const line of lines) {
              if ((currentChunk + line + '\n').length > maxChunkSize && currentChunk.length > 0) {
                chunks.push(currentChunk.trim());
                currentChunk = line + '\n';
              } else {
                currentChunk += line + '\n';
              }
            }
            
            if (currentChunk.trim().length > 0) {
              chunks.push(currentChunk.trim());
            }
            
            return chunks;
          }

          // Anthropic API 호출 함수
          async function reviewCodeWithClaude(code, filename, chunkIndex = null) {
            const chunkInfo = chunkIndex !== null ? ` (Part ${chunkIndex + 1})` : '';
            const prompt = `
          다음은 iOS Swift 프로젝트의 코드${chunkInfo}입니다. 간결하고 핵심적인 코드 리뷰를 해주세요:

          파일: ${filename}${chunkInfo}
          
          \`\`\`swift
          ${code}
          \`\`\`

          다음 관점에서 **중요한 이슈만** 간단히 리뷰해주세요:
          1. **메모리 관리**: 강한 참조 사이클, 메모리 누수
          2. **성능**: 명확한 성능 문제
          3. **버그**: 런타임 에러나 로직 오류
          4. **보안**: 데이터 노출이나 보안 취약점
          5. **Swift 컨벤션**: 중요한 스타일 위반

          ### 응답 형식 (간결하게):
          - ✅ **잘된 점** (1-2줄)
          - ⚠️ **주요 이슈** (구체적 문제점만)
          - 💡 **개선 제안** (핵심 개선사항만)

          불필요한 설명은 생략하고 핵심만 간단히 작성해주세요.
            `;

            try {
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.ANTHROPIC_API_KEY,
                  'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                  model: 'claude-sonnet-4-20250514',  // 최신 Claude Sonnet 4 모델
                  max_tokens: 4000,  // 토큰 수 최적화
                  messages: [{
                    role: 'user',
                    content: prompt
                  }]
                })
              });

              if (!response.ok) {
                throw new Error(`API responded with status ${response.status}`);
              }

              const data = await response.json();
              return data.content[0].text;
            } catch (error) {
              console.error('Claude API Error:', error);
              return `⚠️ 코드 리뷰 중 오류가 발생했습니다: ${error.message}`;
            }
          }

          // 각 변경된 파일에 대해 리뷰 수행
          let reviewComments = [];
          
          for (const file of changedFiles) {
            if (file.endsWith('.swift') || file.endsWith('.h') || file.endsWith('.m')) {
              try {
                const fileContent = fs.readFileSync(file, 'utf8');
                
                // 파일 크기 체크 - 15,000자로 제한
                if (fileContent.length > 15000) {
                  reviewComments.push(`
          ## 📁 ${file}
          
          ⚠️ **파일이 너무 큽니다** (${Math.round(fileContent.length/1000)}k characters)
          - 파일을 더 작은 단위로 분리를 고려해보세요
          - 코드 리뷰를 위해 파일을 나누어 다시 PR 해주세요
                  `);
                  continue;
                }
                
                console.log(`Reviewing file: ${file} (${fileContent.length} chars)`);
                
                // 큰 파일은 청크로 나누어 처리
                if (fileContent.length > 8000) {
                  const chunks = chunkCode(fileContent);
                  let chunkReviews = [];
                  
                  for (let i = 0; i < Math.min(chunks.length, 3); i++) { // 최대 3개 청크만 처리
                    const review = await reviewCodeWithClaude(chunks[i], file, i);
                    chunkReviews.push(review);
                    
                    // API 호출 간격 조절
                    if (i < chunks.length - 1) {
                      await new Promise(resolve => setTimeout(resolve, 1500));
                    }
                  }
                  
                  reviewComments.push(`
          ## 📁 ${file}
          
          ${chunkReviews.join('\n\n---\n\n')}
          
          ${chunks.length > 3 ? `\n⚠️ **파일이 커서 처음 3개 섹션만 리뷰했습니다**` : ''}
                  `);
                } else {
                  // 작은 파일은 전체 리뷰
                  const review = await reviewCodeWithClaude(fileContent, file);
                  reviewComments.push(`
          ## 📁 ${file}
          
          ${review}
                  `);
                }
                
                // API 호출 간격 조절
                await new Promise(resolve => setTimeout(resolve, 1000));
                
              } catch (error) {
                console.error(`Error processing file ${file}:`, error);
                reviewComments.push(`
          ## 📁 ${file}
          
          ⚠️ 파일 처리 중 오류: ${error.message}
                `);
              }
            }
          }

          // PR에 코멘트 추가
          if (reviewComments.length > 0) {
            const fullReview = `
          # 🤖 Claude iOS Code Review
          
          > Claude Sonnet 4 AI 자동 리뷰 (핵심 이슈 중심)
          
          ${reviewComments.join('\n\n---\n\n')}
          
          ---
          
          ### 📝 참고:
          - AI 리뷰이므로 참고용으로만 사용
          - 중요한 변경사항은 팀 리뷰 필수
          - 보안 이슈는 별도 검토 필요
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullReview
            });
          }

    - name: Swift Lint (Optional)
      run: |
        if command -v swiftlint &> /dev/null; then
          swiftlint --reporter github-actions-logging
        else
          echo "SwiftLint not found, skipping..."
        fi
