# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: iOS Swift Code Review with Claude

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.swift'
      - '**/*.h'
      - '**/*.m'

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.swift
          **/*.h
          **/*.m
        separator: ","
    
    - name: Code Review with Claude
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        github-token: ${{ secrets.GIT_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Changed files
          const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(',');
          
          // Anthropic API 호출 함수
          async function reviewCodeWithClaude(code, filename) {
            const prompt = `
          다음은 iOS Swift 프로젝트의 코드입니다. 전문적인 코드 리뷰를 해주세요:

          파일: ${filename}
          
          \`\`\`swift
          ${code}
          \`\`\`

          다음 관점에서 리뷰해주세요:
          1. **아키텍처 패턴**: MVVM, Coordinator, ReactorKit 등의 적절한 사용
          2. **메모리 관리**: 강한 참조 사이클, 메모리 누수 가능성
          3. **성능**: 비효율적인 코드나 개선 가능한 부분
          4. **코드 품질**: 가독성, 유지보수성, Swift 컨벤션
          5. **보안**: 잠재적 보안 이슈
          6. **베스트 프랙티스**: iOS 개발 모범 사례 준수

          ### 리뷰 형식:
          - ✅ **잘된 점**: 좋은 부분들
          - ⚠️ **개선 필요**: 문제점과 해결 방안
          - 💡 **제안사항**: 더 나은 구현 방법
          - 🐛 **잠재적 버그**: 발견된 문제점

          구체적이고 실행 가능한 피드백을 제공해주세요.
            `;

            try {
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.ANTHROPIC_API_KEY,
                  'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                  model: 'claude-3-sonnet-20240229',
                  max_tokens: 4000,
                  messages: [{
                    role: 'user',
                    content: prompt
                  }]
                })
              });

              const data = await response.json();
              return data.content[0].text;
            } catch (error) {
              console.error('Claude API Error:', error);
              return `⚠️ 코드 리뷰 중 오류가 발생했습니다: ${error.message}`;
            }
          }

          // 각 변경된 파일에 대해 리뷰 수행
          let reviewComments = [];
          
          for (const file of changedFiles) {
            if (file.endsWith('.swift') || file.endsWith('.h') || file.endsWith('.m')) {
              try {
                const fileContent = fs.readFileSync(file, 'utf8');
                
                // 파일이 너무 크면 스킵 (Claude 토큰 제한)
                if (fileContent.length > 10000) {
                  reviewComments.push(`
          ## 📁 ${file}
          
          ⚠️ **파일이 너무 큽니다** (${fileContent.length} characters)
          - 파일을 더 작은 단위로 분리하는 것을 고려해보세요
          - 단일 책임 원칙(SRP)을 적용해보세요
                  `);
                  continue;
                }
                
                console.log(`Reviewing file: ${file}`);
                const review = await reviewCodeWithClaude(fileContent, file);
                
                reviewComments.push(`
          ## 📁 ${file}
          
          ${review}
                `);
                
                // API 호출 간격 조절 (rate limiting 방지)
                await new Promise(resolve => setTimeout(resolve, 1000));
                
              } catch (error) {
                console.error(`Error processing file ${file}:`, error);
                reviewComments.push(`
          ## 📁 ${file}
          
          ⚠️ 파일 처리 중 오류가 발생했습니다: ${error.message}
                `);
              }
            }
          }

          // PR에 코멘트 추가
          if (reviewComments.length > 0) {
            const fullReview = `
          # 🤖 Claude iOS Swift Code Review
          
          > 이 리뷰는 Claude AI에 의해 자동 생성되었습니다.
          
          ${reviewComments.join('\n\n---\n\n')}
          
          ---
          
          ### 📝 참고사항:
          - 이 리뷰는 AI가 생성한 것으로, 참고용으로만 사용해주세요
          - 중요한 변경사항은 팀원과 함께 검토해주세요
          - 보안 관련 이슈는 별도로 확인이 필요합니다
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullReview
            });
          }

    - name: Swift Lint (Optional)
      run: |
        if command -v swiftlint &> /dev/null; then
          swiftlint --reporter github-actions-logging
        else
          echo "SwiftLint not found, skipping..."
        fi
